/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 225.0, "minX": 0.0, "maxY": 304480.0, "series": [{"data": [[0.0, 225.0], [0.1, 225.0], [0.2, 225.0], [0.3, 225.0], [0.4, 225.0], [0.5, 225.0], [0.6, 225.0], [0.7, 225.0], [0.8, 225.0], [0.9, 225.0], [1.0, 485.0], [1.1, 485.0], [1.2, 485.0], [1.3, 485.0], [1.4, 485.0], [1.5, 485.0], [1.6, 485.0], [1.7, 485.0], [1.8, 485.0], [1.9, 485.0], [2.0, 495.0], [2.1, 495.0], [2.2, 495.0], [2.3, 495.0], [2.4, 495.0], [2.5, 495.0], [2.6, 495.0], [2.7, 495.0], [2.8, 495.0], [2.9, 495.0], [3.0, 534.0], [3.1, 534.0], [3.2, 534.0], [3.3, 534.0], [3.4, 534.0], [3.5, 534.0], [3.6, 534.0], [3.7, 534.0], [3.8, 534.0], [3.9, 534.0], [4.0, 748.0], [4.1, 748.0], [4.2, 748.0], [4.3, 748.0], [4.4, 748.0], [4.5, 748.0], [4.6, 748.0], [4.7, 748.0], [4.8, 748.0], [4.9, 748.0], [5.0, 762.0], [5.1, 762.0], [5.2, 762.0], [5.3, 762.0], [5.4, 762.0], [5.5, 762.0], [5.6, 762.0], [5.7, 762.0], [5.8, 762.0], [5.9, 762.0], [6.0, 789.0], [6.1, 789.0], [6.2, 789.0], [6.3, 789.0], [6.4, 789.0], [6.5, 789.0], [6.6, 789.0], [6.7, 789.0], [6.8, 789.0], [6.9, 789.0], [7.0, 791.0], [7.1, 791.0], [7.2, 791.0], [7.3, 791.0], [7.4, 791.0], [7.5, 791.0], [7.6, 791.0], [7.7, 791.0], [7.8, 791.0], [7.9, 791.0], [8.0, 833.0], [8.1, 833.0], [8.2, 833.0], [8.3, 833.0], [8.4, 833.0], [8.5, 833.0], [8.6, 833.0], [8.7, 833.0], [8.8, 833.0], [8.9, 833.0], [9.0, 919.0], [9.1, 919.0], [9.2, 919.0], [9.3, 919.0], [9.4, 919.0], [9.5, 919.0], [9.6, 919.0], [9.7, 919.0], [9.8, 919.0], [9.9, 919.0], [10.0, 925.0], [10.1, 925.0], [10.2, 925.0], [10.3, 925.0], [10.4, 925.0], [10.5, 925.0], [10.6, 925.0], [10.7, 925.0], [10.8, 925.0], [10.9, 925.0], [11.0, 929.0], [11.1, 929.0], [11.2, 929.0], [11.3, 929.0], [11.4, 929.0], [11.5, 929.0], [11.6, 929.0], [11.7, 929.0], [11.8, 929.0], [11.9, 929.0], [12.0, 936.0], [12.1, 936.0], [12.2, 936.0], [12.3, 936.0], [12.4, 936.0], [12.5, 936.0], [12.6, 936.0], [12.7, 936.0], [12.8, 936.0], [12.9, 936.0], [13.0, 960.0], [13.1, 960.0], [13.2, 960.0], [13.3, 960.0], [13.4, 960.0], [13.5, 960.0], [13.6, 960.0], [13.7, 960.0], [13.8, 960.0], [13.9, 960.0], [14.0, 982.0], [14.1, 982.0], [14.2, 982.0], [14.3, 982.0], [14.4, 982.0], [14.5, 982.0], [14.6, 982.0], [14.7, 982.0], [14.8, 982.0], [14.9, 982.0], [15.0, 1014.0], [15.1, 1014.0], [15.2, 1014.0], [15.3, 1014.0], [15.4, 1014.0], [15.5, 1014.0], [15.6, 1014.0], [15.7, 1014.0], [15.8, 1014.0], [15.9, 1014.0], [16.0, 1038.0], [16.1, 1038.0], [16.2, 1038.0], [16.3, 1038.0], [16.4, 1038.0], [16.5, 1038.0], [16.6, 1038.0], [16.7, 1038.0], [16.8, 1038.0], [16.9, 1038.0], [17.0, 1202.0], [17.1, 1202.0], [17.2, 1202.0], [17.3, 1202.0], [17.4, 1202.0], [17.5, 1202.0], [17.6, 1202.0], [17.7, 1202.0], [17.8, 1202.0], [17.9, 1202.0], [18.0, 1293.0], [18.1, 1293.0], [18.2, 1293.0], [18.3, 1293.0], [18.4, 1293.0], [18.5, 1293.0], [18.6, 1293.0], [18.7, 1293.0], [18.8, 1293.0], [18.9, 1293.0], [19.0, 1340.0], [19.1, 1340.0], [19.2, 1340.0], [19.3, 1340.0], [19.4, 1340.0], [19.5, 1340.0], [19.6, 1340.0], [19.7, 1340.0], [19.8, 1340.0], [19.9, 1340.0], [20.0, 1389.0], [20.1, 1389.0], [20.2, 1389.0], [20.3, 1389.0], [20.4, 1389.0], [20.5, 1389.0], [20.6, 1389.0], [20.7, 1389.0], [20.8, 1389.0], [20.9, 1389.0], [21.0, 1415.0], [21.1, 1415.0], [21.2, 1415.0], [21.3, 1415.0], [21.4, 1415.0], [21.5, 1415.0], [21.6, 1415.0], [21.7, 1415.0], [21.8, 1415.0], [21.9, 1415.0], [22.0, 1571.0], [22.1, 1571.0], [22.2, 1571.0], [22.3, 1571.0], [22.4, 1571.0], [22.5, 1571.0], [22.6, 1571.0], [22.7, 1571.0], [22.8, 1571.0], [22.9, 1571.0], [23.0, 1620.0], [23.1, 1620.0], [23.2, 1620.0], [23.3, 1620.0], [23.4, 1620.0], [23.5, 1620.0], [23.6, 1620.0], [23.7, 1620.0], [23.8, 1620.0], [23.9, 1620.0], [24.0, 1641.0], [24.1, 1641.0], [24.2, 1641.0], [24.3, 1641.0], [24.4, 1641.0], [24.5, 1641.0], [24.6, 1641.0], [24.7, 1641.0], [24.8, 1641.0], [24.9, 1641.0], [25.0, 1659.0], [25.1, 1659.0], [25.2, 1659.0], [25.3, 1659.0], [25.4, 1659.0], [25.5, 1659.0], [25.6, 1659.0], [25.7, 1659.0], [25.8, 1659.0], [25.9, 1659.0], [26.0, 1722.0], [26.1, 1722.0], [26.2, 1722.0], [26.3, 1722.0], [26.4, 1722.0], [26.5, 1722.0], [26.6, 1722.0], [26.7, 1722.0], [26.8, 1722.0], [26.9, 1722.0], [27.0, 1761.0], [27.1, 1761.0], [27.2, 1761.0], [27.3, 1761.0], [27.4, 1761.0], [27.5, 1761.0], [27.6, 1761.0], [27.7, 1761.0], [27.8, 1761.0], [27.9, 1761.0], [28.0, 1782.0], [28.1, 1782.0], [28.2, 1782.0], [28.3, 1782.0], [28.4, 1782.0], [28.5, 1782.0], [28.6, 1782.0], [28.7, 1782.0], [28.8, 1782.0], [28.9, 1782.0], [29.0, 1824.0], [29.1, 1824.0], [29.2, 1824.0], [29.3, 1824.0], [29.4, 1824.0], [29.5, 1824.0], [29.6, 1824.0], [29.7, 1824.0], [29.8, 1824.0], [29.9, 1824.0], [30.0, 2114.0], [30.1, 2114.0], [30.2, 2114.0], [30.3, 2114.0], [30.4, 2114.0], [30.5, 2114.0], [30.6, 2114.0], [30.7, 2114.0], [30.8, 2114.0], [30.9, 2114.0], [31.0, 2193.0], [31.1, 2193.0], [31.2, 2193.0], [31.3, 2193.0], [31.4, 2193.0], [31.5, 2193.0], [31.6, 2193.0], [31.7, 2193.0], [31.8, 2193.0], [31.9, 2193.0], [32.0, 2196.0], [32.1, 2196.0], [32.2, 2196.0], [32.3, 2196.0], [32.4, 2196.0], [32.5, 2196.0], [32.6, 2196.0], [32.7, 2196.0], [32.8, 2196.0], [32.9, 2196.0], [33.0, 2256.0], [33.1, 2256.0], [33.2, 2256.0], [33.3, 2256.0], [33.4, 2256.0], [33.5, 2256.0], [33.6, 2256.0], [33.7, 2256.0], [33.8, 2256.0], [33.9, 2256.0], [34.0, 2465.0], [34.1, 2465.0], [34.2, 2465.0], [34.3, 2465.0], [34.4, 2465.0], [34.5, 2465.0], [34.6, 2465.0], [34.7, 2465.0], [34.8, 2465.0], [34.9, 2465.0], [35.0, 2468.0], [35.1, 2468.0], [35.2, 2468.0], [35.3, 2468.0], [35.4, 2468.0], [35.5, 2468.0], [35.6, 2468.0], [35.7, 2468.0], [35.8, 2468.0], [35.9, 2468.0], [36.0, 3362.0], [36.1, 3362.0], [36.2, 3362.0], [36.3, 3362.0], [36.4, 3362.0], [36.5, 3362.0], [36.6, 3362.0], [36.7, 3362.0], [36.8, 3362.0], [36.9, 3362.0], [37.0, 3466.0], [37.1, 3466.0], [37.2, 3466.0], [37.3, 3466.0], [37.4, 3466.0], [37.5, 3466.0], [37.6, 3466.0], [37.7, 3466.0], [37.8, 3466.0], [37.9, 3466.0], [38.0, 3677.0], [38.1, 3677.0], [38.2, 3677.0], [38.3, 3677.0], [38.4, 3677.0], [38.5, 3677.0], [38.6, 3677.0], [38.7, 3677.0], [38.8, 3677.0], [38.9, 3677.0], [39.0, 3716.0], [39.1, 3716.0], [39.2, 3716.0], [39.3, 3716.0], [39.4, 3716.0], [39.5, 3716.0], [39.6, 3716.0], [39.7, 3716.0], [39.8, 3716.0], [39.9, 3716.0], [40.0, 3880.0], [40.1, 3880.0], [40.2, 3880.0], [40.3, 3880.0], [40.4, 3880.0], [40.5, 3880.0], [40.6, 3880.0], [40.7, 3880.0], [40.8, 3880.0], [40.9, 3880.0], [41.0, 3883.0], [41.1, 3883.0], [41.2, 3883.0], [41.3, 3883.0], [41.4, 3883.0], [41.5, 3883.0], [41.6, 3883.0], [41.7, 3883.0], [41.8, 3883.0], [41.9, 3883.0], [42.0, 4030.0], [42.1, 4030.0], [42.2, 4030.0], [42.3, 4030.0], [42.4, 4030.0], [42.5, 4030.0], [42.6, 4030.0], [42.7, 4030.0], [42.8, 4030.0], [42.9, 4030.0], [43.0, 4079.0], [43.1, 4079.0], [43.2, 4079.0], [43.3, 4079.0], [43.4, 4079.0], [43.5, 4079.0], [43.6, 4079.0], [43.7, 4079.0], [43.8, 4079.0], [43.9, 4079.0], [44.0, 4109.0], [44.1, 4109.0], [44.2, 4109.0], [44.3, 4109.0], [44.4, 4109.0], [44.5, 4109.0], [44.6, 4109.0], [44.7, 4109.0], [44.8, 4109.0], [44.9, 4109.0], [45.0, 4177.0], [45.1, 4177.0], [45.2, 4177.0], [45.3, 4177.0], [45.4, 4177.0], [45.5, 4177.0], [45.6, 4177.0], [45.7, 4177.0], [45.8, 4177.0], [45.9, 4177.0], [46.0, 4393.0], [46.1, 4393.0], [46.2, 4393.0], [46.3, 4393.0], [46.4, 4393.0], [46.5, 4393.0], [46.6, 4393.0], [46.7, 4393.0], [46.8, 4393.0], [46.9, 4393.0], [47.0, 4425.0], [47.1, 4425.0], [47.2, 4425.0], [47.3, 4425.0], [47.4, 4425.0], [47.5, 4425.0], [47.6, 4425.0], [47.7, 4425.0], [47.8, 4425.0], [47.9, 4425.0], [48.0, 4524.0], [48.1, 4524.0], [48.2, 4524.0], [48.3, 4524.0], [48.4, 4524.0], [48.5, 4524.0], [48.6, 4524.0], [48.7, 4524.0], [48.8, 4524.0], [48.9, 4524.0], [49.0, 4690.0], [49.1, 4690.0], [49.2, 4690.0], [49.3, 4690.0], [49.4, 4690.0], [49.5, 4690.0], [49.6, 4690.0], [49.7, 4690.0], [49.8, 4690.0], [49.9, 4690.0], [50.0, 4784.0], [50.1, 4784.0], [50.2, 4784.0], [50.3, 4784.0], [50.4, 4784.0], [50.5, 4784.0], [50.6, 4784.0], [50.7, 4784.0], [50.8, 4784.0], [50.9, 4784.0], [51.0, 4814.0], [51.1, 4814.0], [51.2, 4814.0], [51.3, 4814.0], [51.4, 4814.0], [51.5, 4814.0], [51.6, 4814.0], [51.7, 4814.0], [51.8, 4814.0], [51.9, 4814.0], [52.0, 4912.0], [52.1, 4912.0], [52.2, 4912.0], [52.3, 4912.0], [52.4, 4912.0], [52.5, 4912.0], [52.6, 4912.0], [52.7, 4912.0], [52.8, 4912.0], [52.9, 4912.0], [53.0, 4961.0], [53.1, 4961.0], [53.2, 4961.0], [53.3, 4961.0], [53.4, 4961.0], [53.5, 4961.0], [53.6, 4961.0], [53.7, 4961.0], [53.8, 4961.0], [53.9, 4961.0], [54.0, 5008.0], [54.1, 5008.0], [54.2, 5008.0], [54.3, 5008.0], [54.4, 5008.0], [54.5, 5008.0], [54.6, 5008.0], [54.7, 5008.0], [54.8, 5008.0], [54.9, 5008.0], [55.0, 5343.0], [55.1, 5343.0], [55.2, 5343.0], [55.3, 5343.0], [55.4, 5343.0], [55.5, 5343.0], [55.6, 5343.0], [55.7, 5343.0], [55.8, 5343.0], [55.9, 5343.0], [56.0, 5590.0], [56.1, 5590.0], [56.2, 5590.0], [56.3, 5590.0], [56.4, 5590.0], [56.5, 5590.0], [56.6, 5590.0], [56.7, 5590.0], [56.8, 5590.0], [56.9, 5590.0], [57.0, 5710.0], [57.1, 5710.0], [57.2, 5710.0], [57.3, 5710.0], [57.4, 5710.0], [57.5, 5710.0], [57.6, 5710.0], [57.7, 5710.0], [57.8, 5710.0], [57.9, 5710.0], [58.0, 6258.0], [58.1, 6258.0], [58.2, 6258.0], [58.3, 6258.0], [58.4, 6258.0], [58.5, 6258.0], [58.6, 6258.0], [58.7, 6258.0], [58.8, 6258.0], [58.9, 6258.0], [59.0, 6725.0], [59.1, 6725.0], [59.2, 6725.0], [59.3, 6725.0], [59.4, 6725.0], [59.5, 6725.0], [59.6, 6725.0], [59.7, 6725.0], [59.8, 6725.0], [59.9, 6725.0], [60.0, 6990.0], [60.1, 6990.0], [60.2, 6990.0], [60.3, 6990.0], [60.4, 6990.0], [60.5, 6990.0], [60.6, 6990.0], [60.7, 6990.0], [60.8, 6990.0], [60.9, 6990.0], [61.0, 7160.0], [61.1, 7160.0], [61.2, 7160.0], [61.3, 7160.0], [61.4, 7160.0], [61.5, 7160.0], [61.6, 7160.0], [61.7, 7160.0], [61.8, 7160.0], [61.9, 7160.0], [62.0, 7812.0], [62.1, 7812.0], [62.2, 7812.0], [62.3, 7812.0], [62.4, 7812.0], [62.5, 7812.0], [62.6, 7812.0], [62.7, 7812.0], [62.8, 7812.0], [62.9, 7812.0], [63.0, 7910.0], [63.1, 7910.0], [63.2, 7910.0], [63.3, 7910.0], [63.4, 7910.0], [63.5, 7910.0], [63.6, 7910.0], [63.7, 7910.0], [63.8, 7910.0], [63.9, 7910.0], [64.0, 7929.0], [64.1, 7929.0], [64.2, 7929.0], [64.3, 7929.0], [64.4, 7929.0], [64.5, 7929.0], [64.6, 7929.0], [64.7, 7929.0], [64.8, 7929.0], [64.9, 7929.0], [65.0, 8180.0], [65.1, 8180.0], [65.2, 8180.0], [65.3, 8180.0], [65.4, 8180.0], [65.5, 8180.0], [65.6, 8180.0], [65.7, 8180.0], [65.8, 8180.0], [65.9, 8180.0], [66.0, 8322.0], [66.1, 8322.0], [66.2, 8322.0], [66.3, 8322.0], [66.4, 8322.0], [66.5, 8322.0], [66.6, 8322.0], [66.7, 8322.0], [66.8, 8322.0], [66.9, 8322.0], [67.0, 8595.0], [67.1, 8595.0], [67.2, 8595.0], [67.3, 8595.0], [67.4, 8595.0], [67.5, 8595.0], [67.6, 8595.0], [67.7, 8595.0], [67.8, 8595.0], [67.9, 8595.0], [68.0, 8674.0], [68.1, 8674.0], [68.2, 8674.0], [68.3, 8674.0], [68.4, 8674.0], [68.5, 8674.0], [68.6, 8674.0], [68.7, 8674.0], [68.8, 8674.0], [68.9, 8674.0], [69.0, 8747.0], [69.1, 8747.0], [69.2, 8747.0], [69.3, 8747.0], [69.4, 8747.0], [69.5, 8747.0], [69.6, 8747.0], [69.7, 8747.0], [69.8, 8747.0], [69.9, 8747.0], [70.0, 8984.0], [70.1, 8984.0], [70.2, 8984.0], [70.3, 8984.0], [70.4, 8984.0], [70.5, 8984.0], [70.6, 8984.0], [70.7, 8984.0], [70.8, 8984.0], [70.9, 8984.0], [71.0, 9233.0], [71.1, 9233.0], [71.2, 9233.0], [71.3, 9233.0], [71.4, 9233.0], [71.5, 9233.0], [71.6, 9233.0], [71.7, 9233.0], [71.8, 9233.0], [71.9, 9233.0], [72.0, 9665.0], [72.1, 9665.0], [72.2, 9665.0], [72.3, 9665.0], [72.4, 9665.0], [72.5, 9665.0], [72.6, 9665.0], [72.7, 9665.0], [72.8, 9665.0], [72.9, 9665.0], [73.0, 10737.0], [73.1, 10737.0], [73.2, 10737.0], [73.3, 10737.0], [73.4, 10737.0], [73.5, 10737.0], [73.6, 10737.0], [73.7, 10737.0], [73.8, 10737.0], [73.9, 10737.0], [74.0, 10828.0], [74.1, 10828.0], [74.2, 10828.0], [74.3, 10828.0], [74.4, 10828.0], [74.5, 10828.0], [74.6, 10828.0], [74.7, 10828.0], [74.8, 10828.0], [74.9, 10828.0], [75.0, 11339.0], [75.1, 11339.0], [75.2, 11339.0], [75.3, 11339.0], [75.4, 11339.0], [75.5, 11339.0], [75.6, 11339.0], [75.7, 11339.0], [75.8, 11339.0], [75.9, 11339.0], [76.0, 11674.0], [76.1, 11674.0], [76.2, 11674.0], [76.3, 11674.0], [76.4, 11674.0], [76.5, 11674.0], [76.6, 11674.0], [76.7, 11674.0], [76.8, 11674.0], [76.9, 11674.0], [77.0, 11944.0], [77.1, 11944.0], [77.2, 11944.0], [77.3, 11944.0], [77.4, 11944.0], [77.5, 11944.0], [77.6, 11944.0], [77.7, 11944.0], [77.8, 11944.0], [77.9, 11944.0], [78.0, 12373.0], [78.1, 12373.0], [78.2, 12373.0], [78.3, 12373.0], [78.4, 12373.0], [78.5, 12373.0], [78.6, 12373.0], [78.7, 12373.0], [78.8, 12373.0], [78.9, 12373.0], [79.0, 12598.0], [79.1, 12598.0], [79.2, 12598.0], [79.3, 12598.0], [79.4, 12598.0], [79.5, 12598.0], [79.6, 12598.0], [79.7, 12598.0], [79.8, 12598.0], [79.9, 12598.0], [80.0, 12617.0], [80.1, 12617.0], [80.2, 12617.0], [80.3, 12617.0], [80.4, 12617.0], [80.5, 12617.0], [80.6, 12617.0], [80.7, 12617.0], [80.8, 12617.0], [80.9, 12617.0], [81.0, 12649.0], [81.1, 12649.0], [81.2, 12649.0], [81.3, 12649.0], [81.4, 12649.0], [81.5, 12649.0], [81.6, 12649.0], [81.7, 12649.0], [81.8, 12649.0], [81.9, 12649.0], [82.0, 12878.0], [82.1, 12878.0], [82.2, 12878.0], [82.3, 12878.0], [82.4, 12878.0], [82.5, 12878.0], [82.6, 12878.0], [82.7, 12878.0], [82.8, 12878.0], [82.9, 12878.0], [83.0, 12947.0], [83.1, 12947.0], [83.2, 12947.0], [83.3, 12947.0], [83.4, 12947.0], [83.5, 12947.0], [83.6, 12947.0], [83.7, 12947.0], [83.8, 12947.0], [83.9, 12947.0], [84.0, 13020.0], [84.1, 13020.0], [84.2, 13020.0], [84.3, 13020.0], [84.4, 13020.0], [84.5, 13020.0], [84.6, 13020.0], [84.7, 13020.0], [84.8, 13020.0], [84.9, 13020.0], [85.0, 13110.0], [85.1, 13110.0], [85.2, 13110.0], [85.3, 13110.0], [85.4, 13110.0], [85.5, 13110.0], [85.6, 13110.0], [85.7, 13110.0], [85.8, 13110.0], [85.9, 13110.0], [86.0, 13853.0], [86.1, 13853.0], [86.2, 13853.0], [86.3, 13853.0], [86.4, 13853.0], [86.5, 13853.0], [86.6, 13853.0], [86.7, 13853.0], [86.8, 13853.0], [86.9, 13853.0], [87.0, 16807.0], [87.1, 16807.0], [87.2, 16807.0], [87.3, 16807.0], [87.4, 16807.0], [87.5, 16807.0], [87.6, 16807.0], [87.7, 16807.0], [87.8, 16807.0], [87.9, 16807.0], [88.0, 17415.0], [88.1, 17415.0], [88.2, 17415.0], [88.3, 17415.0], [88.4, 17415.0], [88.5, 17415.0], [88.6, 17415.0], [88.7, 17415.0], [88.8, 17415.0], [88.9, 17415.0], [89.0, 21475.0], [89.1, 21475.0], [89.2, 21475.0], [89.3, 21475.0], [89.4, 21475.0], [89.5, 21475.0], [89.6, 21475.0], [89.7, 21475.0], [89.8, 21475.0], [89.9, 21475.0], [90.0, 21520.0], [90.1, 21520.0], [90.2, 21520.0], [90.3, 21520.0], [90.4, 21520.0], [90.5, 21520.0], [90.6, 21520.0], [90.7, 21520.0], [90.8, 21520.0], [90.9, 21520.0], [91.0, 22461.0], [91.1, 22461.0], [91.2, 22461.0], [91.3, 22461.0], [91.4, 22461.0], [91.5, 22461.0], [91.6, 22461.0], [91.7, 22461.0], [91.8, 22461.0], [91.9, 22461.0], [92.0, 23179.0], [92.1, 23179.0], [92.2, 23179.0], [92.3, 23179.0], [92.4, 23179.0], [92.5, 23179.0], [92.6, 23179.0], [92.7, 23179.0], [92.8, 23179.0], [92.9, 23179.0], [93.0, 23364.0], [93.1, 23364.0], [93.2, 23364.0], [93.3, 23364.0], [93.4, 23364.0], [93.5, 23364.0], [93.6, 23364.0], [93.7, 23364.0], [93.8, 23364.0], [93.9, 23364.0], [94.0, 23802.0], [94.1, 23802.0], [94.2, 23802.0], [94.3, 23802.0], [94.4, 23802.0], [94.5, 23802.0], [94.6, 23802.0], [94.7, 23802.0], [94.8, 23802.0], [94.9, 23802.0], [95.0, 24546.0], [95.1, 24546.0], [95.2, 24546.0], [95.3, 24546.0], [95.4, 24546.0], [95.5, 24546.0], [95.6, 24546.0], [95.7, 24546.0], [95.8, 24546.0], [95.9, 24546.0], [96.0, 26611.0], [96.1, 26611.0], [96.2, 26611.0], [96.3, 26611.0], [96.4, 26611.0], [96.5, 26611.0], [96.6, 26611.0], [96.7, 26611.0], [96.8, 26611.0], [96.9, 26611.0], [97.0, 27287.0], [97.1, 27287.0], [97.2, 27287.0], [97.3, 27287.0], [97.4, 27287.0], [97.5, 27287.0], [97.6, 27287.0], [97.7, 27287.0], [97.8, 27287.0], [97.9, 27287.0], [98.0, 51868.0], [98.1, 51868.0], [98.2, 51868.0], [98.3, 51868.0], [98.4, 51868.0], [98.5, 51868.0], [98.6, 51868.0], [98.7, 51868.0], [98.8, 51868.0], [98.9, 51868.0], [99.0, 65998.0], [99.1, 65998.0], [99.2, 65998.0], [99.3, 65998.0], [99.4, 65998.0], [99.5, 65998.0], [99.6, 65998.0], [99.7, 65998.0], [99.8, 65998.0], [99.9, 65998.0]], "isOverall": false, "label": "getNavigations", "isController": false}, {"data": [[0.0, 1189.0], [0.1, 1189.0], [0.2, 1189.0], [0.3, 1189.0], [0.4, 1189.0], [0.5, 1189.0], [0.6, 1189.0], [0.7, 1189.0], [0.8, 1189.0], [0.9, 1189.0], [1.0, 4560.0], [1.1, 4560.0], [1.2, 4560.0], [1.3, 4560.0], [1.4, 4560.0], [1.5, 4560.0], [1.6, 4560.0], [1.7, 4560.0], [1.8, 4560.0], [1.9, 4560.0], [2.0, 38341.0], [2.1, 38341.0], [2.2, 38341.0], [2.3, 38341.0], [2.4, 38341.0], [2.5, 38341.0], [2.6, 38341.0], [2.7, 38341.0], [2.8, 38341.0], [2.9, 38341.0], [3.0, 47656.0], [3.1, 47656.0], [3.2, 47656.0], [3.3, 47656.0], [3.4, 47656.0], [3.5, 47656.0], [3.6, 47656.0], [3.7, 47656.0], [3.8, 47656.0], [3.9, 47656.0], [4.0, 72714.0], [4.1, 72714.0], [4.2, 72714.0], [4.3, 72714.0], [4.4, 72714.0], [4.5, 72714.0], [4.6, 72714.0], [4.7, 72714.0], [4.8, 72714.0], [4.9, 72714.0], [5.0, 88006.0], [5.1, 88006.0], [5.2, 88006.0], [5.3, 88006.0], [5.4, 88006.0], [5.5, 88006.0], [5.6, 88006.0], [5.7, 88006.0], [5.8, 88006.0], [5.9, 88006.0], [6.0, 102867.0], [6.1, 102867.0], [6.2, 102867.0], [6.3, 102867.0], [6.4, 102867.0], [6.5, 102867.0], [6.6, 102867.0], [6.7, 102867.0], [6.8, 102867.0], [6.9, 102867.0], [7.0, 113122.0], [7.1, 113122.0], [7.2, 113122.0], [7.3, 113122.0], [7.4, 113122.0], [7.5, 113122.0], [7.6, 113122.0], [7.7, 113122.0], [7.8, 113122.0], [7.9, 113122.0], [8.0, 132300.0], [8.1, 132300.0], [8.2, 132300.0], [8.3, 132300.0], [8.4, 132300.0], [8.5, 132300.0], [8.6, 132300.0], [8.7, 132300.0], [8.8, 132300.0], [8.9, 132300.0], [9.0, 134494.0], [9.1, 134494.0], [9.2, 134494.0], [9.3, 134494.0], [9.4, 134494.0], [9.5, 134494.0], [9.6, 134494.0], [9.7, 134494.0], [9.8, 134494.0], [9.9, 134494.0], [10.0, 154737.0], [10.1, 154737.0], [10.2, 154737.0], [10.3, 154737.0], [10.4, 154737.0], [10.5, 154737.0], [10.6, 154737.0], [10.7, 154737.0], [10.8, 154737.0], [10.9, 154737.0], [11.0, 165625.0], [11.1, 165625.0], [11.2, 165625.0], [11.3, 165625.0], [11.4, 165625.0], [11.5, 165625.0], [11.6, 165625.0], [11.7, 165625.0], [11.8, 165625.0], [11.9, 165625.0], [12.0, 168671.0], [12.1, 168671.0], [12.2, 168671.0], [12.3, 168671.0], [12.4, 168671.0], [12.5, 168671.0], [12.6, 168671.0], [12.7, 168671.0], [12.8, 168671.0], [12.9, 168671.0], [13.0, 178382.0], [13.1, 178382.0], [13.2, 178382.0], [13.3, 178382.0], [13.4, 178382.0], [13.5, 178382.0], [13.6, 178382.0], [13.7, 178382.0], [13.8, 178382.0], [13.9, 178382.0], [14.0, 178402.0], [14.1, 178402.0], [14.2, 178402.0], [14.3, 178402.0], [14.4, 178402.0], [14.5, 178402.0], [14.6, 178402.0], [14.7, 178402.0], [14.8, 178402.0], [14.9, 178402.0], [15.0, 179935.0], [15.1, 179935.0], [15.2, 179935.0], [15.3, 179935.0], [15.4, 179935.0], [15.5, 179935.0], [15.6, 179935.0], [15.7, 179935.0], [15.8, 179935.0], [15.9, 179935.0], [16.0, 183005.0], [16.1, 183005.0], [16.2, 183005.0], [16.3, 183005.0], [16.4, 183005.0], [16.5, 183005.0], [16.6, 183005.0], [16.7, 183005.0], [16.8, 183005.0], [16.9, 183005.0], [17.0, 186374.0], [17.1, 186374.0], [17.2, 186374.0], [17.3, 186374.0], [17.4, 186374.0], [17.5, 186374.0], [17.6, 186374.0], [17.7, 186374.0], [17.8, 186374.0], [17.9, 186374.0], [18.0, 188552.0], [18.1, 188552.0], [18.2, 188552.0], [18.3, 188552.0], [18.4, 188552.0], [18.5, 188552.0], [18.6, 188552.0], [18.7, 188552.0], [18.8, 188552.0], [18.9, 188552.0], [19.0, 188847.0], [19.1, 188847.0], [19.2, 188847.0], [19.3, 188847.0], [19.4, 188847.0], [19.5, 188847.0], [19.6, 188847.0], [19.7, 188847.0], [19.8, 188847.0], [19.9, 188847.0], [20.0, 193928.0], [20.1, 193928.0], [20.2, 193928.0], [20.3, 193928.0], [20.4, 193928.0], [20.5, 193928.0], [20.6, 193928.0], [20.7, 193928.0], [20.8, 193928.0], [20.9, 193928.0], [21.0, 196012.0], [21.1, 196012.0], [21.2, 196012.0], [21.3, 196012.0], [21.4, 196012.0], [21.5, 196012.0], [21.6, 196012.0], [21.7, 196012.0], [21.8, 196012.0], [21.9, 196012.0], [22.0, 197655.0], [22.1, 197655.0], [22.2, 197655.0], [22.3, 197655.0], [22.4, 197655.0], [22.5, 197655.0], [22.6, 197655.0], [22.7, 197655.0], [22.8, 197655.0], [22.9, 197655.0], [23.0, 198469.0], [23.1, 198469.0], [23.2, 198469.0], [23.3, 198469.0], [23.4, 198469.0], [23.5, 198469.0], [23.6, 198469.0], [23.7, 198469.0], [23.8, 198469.0], [23.9, 198469.0], [24.0, 202221.0], [24.1, 202221.0], [24.2, 202221.0], [24.3, 202221.0], [24.4, 202221.0], [24.5, 202221.0], [24.6, 202221.0], [24.7, 202221.0], [24.8, 202221.0], [24.9, 202221.0], [25.0, 202656.0], [25.1, 202656.0], [25.2, 202656.0], [25.3, 202656.0], [25.4, 202656.0], [25.5, 202656.0], [25.6, 202656.0], [25.7, 202656.0], [25.8, 202656.0], [25.9, 202656.0], [26.0, 203000.0], [26.1, 203000.0], [26.2, 203000.0], [26.3, 203000.0], [26.4, 203000.0], [26.5, 203000.0], [26.6, 203000.0], [26.7, 203000.0], [26.8, 203000.0], [26.9, 203000.0], [27.0, 204500.0], [27.1, 204500.0], [27.2, 204500.0], [27.3, 204500.0], [27.4, 204500.0], [27.5, 204500.0], [27.6, 204500.0], [27.7, 204500.0], [27.8, 204500.0], [27.9, 204500.0], [28.0, 205552.0], [28.1, 205552.0], [28.2, 205552.0], [28.3, 205552.0], [28.4, 205552.0], [28.5, 205552.0], [28.6, 205552.0], [28.7, 205552.0], [28.8, 205552.0], [28.9, 205552.0], [29.0, 206073.0], [29.1, 206073.0], [29.2, 206073.0], [29.3, 206073.0], [29.4, 206073.0], [29.5, 206073.0], [29.6, 206073.0], [29.7, 206073.0], [29.8, 206073.0], [29.9, 206073.0], [30.0, 206085.0], [30.1, 206085.0], [30.2, 206085.0], [30.3, 206085.0], [30.4, 206085.0], [30.5, 206085.0], [30.6, 206085.0], [30.7, 206085.0], [30.8, 206085.0], [30.9, 206085.0], [31.0, 206290.0], [31.1, 206290.0], [31.2, 206290.0], [31.3, 206290.0], [31.4, 206290.0], [31.5, 206290.0], [31.6, 206290.0], [31.7, 206290.0], [31.8, 206290.0], [31.9, 206290.0], [32.0, 206892.0], [32.1, 206892.0], [32.2, 206892.0], [32.3, 206892.0], [32.4, 206892.0], [32.5, 206892.0], [32.6, 206892.0], [32.7, 206892.0], [32.8, 206892.0], [32.9, 206892.0], [33.0, 207605.0], [33.1, 207605.0], [33.2, 207605.0], [33.3, 207605.0], [33.4, 207605.0], [33.5, 207605.0], [33.6, 207605.0], [33.7, 207605.0], [33.8, 207605.0], [33.9, 207605.0], [34.0, 207739.0], [34.1, 207739.0], [34.2, 207739.0], [34.3, 207739.0], [34.4, 207739.0], [34.5, 207739.0], [34.6, 207739.0], [34.7, 207739.0], [34.8, 207739.0], [34.9, 207739.0], [35.0, 208583.0], [35.1, 208583.0], [35.2, 208583.0], [35.3, 208583.0], [35.4, 208583.0], [35.5, 208583.0], [35.6, 208583.0], [35.7, 208583.0], [35.8, 208583.0], [35.9, 208583.0], [36.0, 209022.0], [36.1, 209022.0], [36.2, 209022.0], [36.3, 209022.0], [36.4, 209022.0], [36.5, 209022.0], [36.6, 209022.0], [36.7, 209022.0], [36.8, 209022.0], [36.9, 209022.0], [37.0, 210495.0], [37.1, 210495.0], [37.2, 210495.0], [37.3, 210495.0], [37.4, 210495.0], [37.5, 210495.0], [37.6, 210495.0], [37.7, 210495.0], [37.8, 210495.0], [37.9, 210495.0], [38.0, 210930.0], [38.1, 210930.0], [38.2, 210930.0], [38.3, 210930.0], [38.4, 210930.0], [38.5, 210930.0], [38.6, 210930.0], [38.7, 210930.0], [38.8, 210930.0], [38.9, 210930.0], [39.0, 210939.0], [39.1, 210939.0], [39.2, 210939.0], [39.3, 210939.0], [39.4, 210939.0], [39.5, 210939.0], [39.6, 210939.0], [39.7, 210939.0], [39.8, 210939.0], [39.9, 210939.0], [40.0, 212526.0], [40.1, 212526.0], [40.2, 212526.0], [40.3, 212526.0], [40.4, 212526.0], [40.5, 212526.0], [40.6, 212526.0], [40.7, 212526.0], [40.8, 212526.0], [40.9, 212526.0], [41.0, 213047.0], [41.1, 213047.0], [41.2, 213047.0], [41.3, 213047.0], [41.4, 213047.0], [41.5, 213047.0], [41.6, 213047.0], [41.7, 213047.0], [41.8, 213047.0], [41.9, 213047.0], [42.0, 213297.0], [42.1, 213297.0], [42.2, 213297.0], [42.3, 213297.0], [42.4, 213297.0], [42.5, 213297.0], [42.6, 213297.0], [42.7, 213297.0], [42.8, 213297.0], [42.9, 213297.0], [43.0, 213348.0], [43.1, 213348.0], [43.2, 213348.0], [43.3, 213348.0], [43.4, 213348.0], [43.5, 213348.0], [43.6, 213348.0], [43.7, 213348.0], [43.8, 213348.0], [43.9, 213348.0], [44.0, 213722.0], [44.1, 213722.0], [44.2, 213722.0], [44.3, 213722.0], [44.4, 213722.0], [44.5, 213722.0], [44.6, 213722.0], [44.7, 213722.0], [44.8, 213722.0], [44.9, 213722.0], [45.0, 214109.0], [45.1, 214109.0], [45.2, 214109.0], [45.3, 214109.0], [45.4, 214109.0], [45.5, 214109.0], [45.6, 214109.0], [45.7, 214109.0], [45.8, 214109.0], [45.9, 214109.0], [46.0, 214945.0], [46.1, 214945.0], [46.2, 214945.0], [46.3, 214945.0], [46.4, 214945.0], [46.5, 214945.0], [46.6, 214945.0], [46.7, 214945.0], [46.8, 214945.0], [46.9, 214945.0], [47.0, 214946.0], [47.1, 214946.0], [47.2, 214946.0], [47.3, 214946.0], [47.4, 214946.0], [47.5, 214946.0], [47.6, 214946.0], [47.7, 214946.0], [47.8, 214946.0], [47.9, 214946.0], [48.0, 215187.0], [48.1, 215187.0], [48.2, 215187.0], [48.3, 215187.0], [48.4, 215187.0], [48.5, 215187.0], [48.6, 215187.0], [48.7, 215187.0], [48.8, 215187.0], [48.9, 215187.0], [49.0, 215225.0], [49.1, 215225.0], [49.2, 215225.0], [49.3, 215225.0], [49.4, 215225.0], [49.5, 215225.0], [49.6, 215225.0], [49.7, 215225.0], [49.8, 215225.0], [49.9, 215225.0], [50.0, 216801.0], [50.1, 216801.0], [50.2, 216801.0], [50.3, 216801.0], [50.4, 216801.0], [50.5, 216801.0], [50.6, 216801.0], [50.7, 216801.0], [50.8, 216801.0], [50.9, 216801.0], [51.0, 217765.0], [51.1, 217765.0], [51.2, 217765.0], [51.3, 217765.0], [51.4, 217765.0], [51.5, 217765.0], [51.6, 217765.0], [51.7, 217765.0], [51.8, 217765.0], [51.9, 217765.0], [52.0, 217971.0], [52.1, 217971.0], [52.2, 217971.0], [52.3, 217971.0], [52.4, 217971.0], [52.5, 217971.0], [52.6, 217971.0], [52.7, 217971.0], [52.8, 217971.0], [52.9, 217971.0], [53.0, 217998.0], [53.1, 217998.0], [53.2, 217998.0], [53.3, 217998.0], [53.4, 217998.0], [53.5, 217998.0], [53.6, 217998.0], [53.7, 217998.0], [53.8, 217998.0], [53.9, 217998.0], [54.0, 218409.0], [54.1, 218409.0], [54.2, 218409.0], [54.3, 218409.0], [54.4, 218409.0], [54.5, 218409.0], [54.6, 218409.0], [54.7, 218409.0], [54.8, 218409.0], [54.9, 218409.0], [55.0, 218979.0], [55.1, 218979.0], [55.2, 218979.0], [55.3, 218979.0], [55.4, 218979.0], [55.5, 218979.0], [55.6, 218979.0], [55.7, 218979.0], [55.8, 218979.0], [55.9, 218979.0], [56.0, 219375.0], [56.1, 219375.0], [56.2, 219375.0], [56.3, 219375.0], [56.4, 219375.0], [56.5, 219375.0], [56.6, 219375.0], [56.7, 219375.0], [56.8, 219375.0], [56.9, 219375.0], [57.0, 219675.0], [57.1, 219675.0], [57.2, 219675.0], [57.3, 219675.0], [57.4, 219675.0], [57.5, 219675.0], [57.6, 219675.0], [57.7, 219675.0], [57.8, 219675.0], [57.9, 219675.0], [58.0, 219914.0], [58.1, 219914.0], [58.2, 219914.0], [58.3, 219914.0], [58.4, 219914.0], [58.5, 219914.0], [58.6, 219914.0], [58.7, 219914.0], [58.8, 219914.0], [58.9, 219914.0], [59.0, 219938.0], [59.1, 219938.0], [59.2, 219938.0], [59.3, 219938.0], [59.4, 219938.0], [59.5, 219938.0], [59.6, 219938.0], [59.7, 219938.0], [59.8, 219938.0], [59.9, 219938.0], [60.0, 220126.0], [60.1, 220126.0], [60.2, 220126.0], [60.3, 220126.0], [60.4, 220126.0], [60.5, 220126.0], [60.6, 220126.0], [60.7, 220126.0], [60.8, 220126.0], [60.9, 220126.0], [61.0, 221157.0], [61.1, 221157.0], [61.2, 221157.0], [61.3, 221157.0], [61.4, 221157.0], [61.5, 221157.0], [61.6, 221157.0], [61.7, 221157.0], [61.8, 221157.0], [61.9, 221157.0], [62.0, 221336.0], [62.1, 221336.0], [62.2, 221336.0], [62.3, 221336.0], [62.4, 221336.0], [62.5, 221336.0], [62.6, 221336.0], [62.7, 221336.0], [62.8, 221336.0], [62.9, 221336.0], [63.0, 221854.0], [63.1, 221854.0], [63.2, 221854.0], [63.3, 221854.0], [63.4, 221854.0], [63.5, 221854.0], [63.6, 221854.0], [63.7, 221854.0], [63.8, 221854.0], [63.9, 221854.0], [64.0, 222474.0], [64.1, 222474.0], [64.2, 222474.0], [64.3, 222474.0], [64.4, 222474.0], [64.5, 222474.0], [64.6, 222474.0], [64.7, 222474.0], [64.8, 222474.0], [64.9, 222474.0], [65.0, 222613.0], [65.1, 222613.0], [65.2, 222613.0], [65.3, 222613.0], [65.4, 222613.0], [65.5, 222613.0], [65.6, 222613.0], [65.7, 222613.0], [65.8, 222613.0], [65.9, 222613.0], [66.0, 222632.0], [66.1, 222632.0], [66.2, 222632.0], [66.3, 222632.0], [66.4, 222632.0], [66.5, 222632.0], [66.6, 222632.0], [66.7, 222632.0], [66.8, 222632.0], [66.9, 222632.0], [67.0, 223268.0], [67.1, 223268.0], [67.2, 223268.0], [67.3, 223268.0], [67.4, 223268.0], [67.5, 223268.0], [67.6, 223268.0], [67.7, 223268.0], [67.8, 223268.0], [67.9, 223268.0], [68.0, 225701.0], [68.1, 225701.0], [68.2, 225701.0], [68.3, 225701.0], [68.4, 225701.0], [68.5, 225701.0], [68.6, 225701.0], [68.7, 225701.0], [68.8, 225701.0], [68.9, 225701.0], [69.0, 226458.0], [69.1, 226458.0], [69.2, 226458.0], [69.3, 226458.0], [69.4, 226458.0], [69.5, 226458.0], [69.6, 226458.0], [69.7, 226458.0], [69.8, 226458.0], [69.9, 226458.0], [70.0, 226994.0], [70.1, 226994.0], [70.2, 226994.0], [70.3, 226994.0], [70.4, 226994.0], [70.5, 226994.0], [70.6, 226994.0], [70.7, 226994.0], [70.8, 226994.0], [70.9, 226994.0], [71.0, 227698.0], [71.1, 227698.0], [71.2, 227698.0], [71.3, 227698.0], [71.4, 227698.0], [71.5, 227698.0], [71.6, 227698.0], [71.7, 227698.0], [71.8, 227698.0], [71.9, 227698.0], [72.0, 228135.0], [72.1, 228135.0], [72.2, 228135.0], [72.3, 228135.0], [72.4, 228135.0], [72.5, 228135.0], [72.6, 228135.0], [72.7, 228135.0], [72.8, 228135.0], [72.9, 228135.0], [73.0, 229629.0], [73.1, 229629.0], [73.2, 229629.0], [73.3, 229629.0], [73.4, 229629.0], [73.5, 229629.0], [73.6, 229629.0], [73.7, 229629.0], [73.8, 229629.0], [73.9, 229629.0], [74.0, 231324.0], [74.1, 231324.0], [74.2, 231324.0], [74.3, 231324.0], [74.4, 231324.0], [74.5, 231324.0], [74.6, 231324.0], [74.7, 231324.0], [74.8, 231324.0], [74.9, 231324.0], [75.0, 231681.0], [75.1, 231681.0], [75.2, 231681.0], [75.3, 231681.0], [75.4, 231681.0], [75.5, 231681.0], [75.6, 231681.0], [75.7, 231681.0], [75.8, 231681.0], [75.9, 231681.0], [76.0, 232052.0], [76.1, 232052.0], [76.2, 232052.0], [76.3, 232052.0], [76.4, 232052.0], [76.5, 232052.0], [76.6, 232052.0], [76.7, 232052.0], [76.8, 232052.0], [76.9, 232052.0], [77.0, 232505.0], [77.1, 232505.0], [77.2, 232505.0], [77.3, 232505.0], [77.4, 232505.0], [77.5, 232505.0], [77.6, 232505.0], [77.7, 232505.0], [77.8, 232505.0], [77.9, 232505.0], [78.0, 233510.0], [78.1, 233510.0], [78.2, 233510.0], [78.3, 233510.0], [78.4, 233510.0], [78.5, 233510.0], [78.6, 233510.0], [78.7, 233510.0], [78.8, 233510.0], [78.9, 233510.0], [79.0, 234165.0], [79.1, 234165.0], [79.2, 234165.0], [79.3, 234165.0], [79.4, 234165.0], [79.5, 234165.0], [79.6, 234165.0], [79.7, 234165.0], [79.8, 234165.0], [79.9, 234165.0], [80.0, 235273.0], [80.1, 235273.0], [80.2, 235273.0], [80.3, 235273.0], [80.4, 235273.0], [80.5, 235273.0], [80.6, 235273.0], [80.7, 235273.0], [80.8, 235273.0], [80.9, 235273.0], [81.0, 235468.0], [81.1, 235468.0], [81.2, 235468.0], [81.3, 235468.0], [81.4, 235468.0], [81.5, 235468.0], [81.6, 235468.0], [81.7, 235468.0], [81.8, 235468.0], [81.9, 235468.0], [82.0, 237726.0], [82.1, 237726.0], [82.2, 237726.0], [82.3, 237726.0], [82.4, 237726.0], [82.5, 237726.0], [82.6, 237726.0], [82.7, 237726.0], [82.8, 237726.0], [82.9, 237726.0], [83.0, 239256.0], [83.1, 239256.0], [83.2, 239256.0], [83.3, 239256.0], [83.4, 239256.0], [83.5, 239256.0], [83.6, 239256.0], [83.7, 239256.0], [83.8, 239256.0], [83.9, 239256.0], [84.0, 239293.0], [84.1, 239293.0], [84.2, 239293.0], [84.3, 239293.0], [84.4, 239293.0], [84.5, 239293.0], [84.6, 239293.0], [84.7, 239293.0], [84.8, 239293.0], [84.9, 239293.0], [85.0, 240514.0], [85.1, 240514.0], [85.2, 240514.0], [85.3, 240514.0], [85.4, 240514.0], [85.5, 240514.0], [85.6, 240514.0], [85.7, 240514.0], [85.8, 240514.0], [85.9, 240514.0], [86.0, 241015.0], [86.1, 241015.0], [86.2, 241015.0], [86.3, 241015.0], [86.4, 241015.0], [86.5, 241015.0], [86.6, 241015.0], [86.7, 241015.0], [86.8, 241015.0], [86.9, 241015.0], [87.0, 241254.0], [87.1, 241254.0], [87.2, 241254.0], [87.3, 241254.0], [87.4, 241254.0], [87.5, 241254.0], [87.6, 241254.0], [87.7, 241254.0], [87.8, 241254.0], [87.9, 241254.0], [88.0, 243387.0], [88.1, 243387.0], [88.2, 243387.0], [88.3, 243387.0], [88.4, 243387.0], [88.5, 243387.0], [88.6, 243387.0], [88.7, 243387.0], [88.8, 243387.0], [88.9, 243387.0], [89.0, 244421.0], [89.1, 244421.0], [89.2, 244421.0], [89.3, 244421.0], [89.4, 244421.0], [89.5, 244421.0], [89.6, 244421.0], [89.7, 244421.0], [89.8, 244421.0], [89.9, 244421.0], [90.0, 244505.0], [90.1, 244505.0], [90.2, 244505.0], [90.3, 244505.0], [90.4, 244505.0], [90.5, 244505.0], [90.6, 244505.0], [90.7, 244505.0], [90.8, 244505.0], [90.9, 244505.0], [91.0, 246518.0], [91.1, 246518.0], [91.2, 246518.0], [91.3, 246518.0], [91.4, 246518.0], [91.5, 246518.0], [91.6, 246518.0], [91.7, 246518.0], [91.8, 246518.0], [91.9, 246518.0], [92.0, 249272.0], [92.1, 249272.0], [92.2, 249272.0], [92.3, 249272.0], [92.4, 249272.0], [92.5, 249272.0], [92.6, 249272.0], [92.7, 249272.0], [92.8, 249272.0], [92.9, 249272.0], [93.0, 249529.0], [93.1, 249529.0], [93.2, 249529.0], [93.3, 249529.0], [93.4, 249529.0], [93.5, 249529.0], [93.6, 249529.0], [93.7, 249529.0], [93.8, 249529.0], [93.9, 249529.0], [94.0, 250555.0], [94.1, 250555.0], [94.2, 250555.0], [94.3, 250555.0], [94.4, 250555.0], [94.5, 250555.0], [94.6, 250555.0], [94.7, 250555.0], [94.8, 250555.0], [94.9, 250555.0], [95.0, 257897.0], [95.1, 257897.0], [95.2, 257897.0], [95.3, 257897.0], [95.4, 257897.0], [95.5, 257897.0], [95.6, 257897.0], [95.7, 257897.0], [95.8, 257897.0], [95.9, 257897.0], [96.0, 258526.0], [96.1, 258526.0], [96.2, 258526.0], [96.3, 258526.0], [96.4, 258526.0], [96.5, 258526.0], [96.6, 258526.0], [96.7, 258526.0], [96.8, 258526.0], [96.9, 258526.0], [97.0, 296821.0], [97.1, 296821.0], [97.2, 296821.0], [97.3, 296821.0], [97.4, 296821.0], [97.5, 296821.0], [97.6, 296821.0], [97.7, 296821.0], [97.8, 296821.0], [97.9, 296821.0], [98.0, 297535.0], [98.1, 297535.0], [98.2, 297535.0], [98.3, 297535.0], [98.4, 297535.0], [98.5, 297535.0], [98.6, 297535.0], [98.7, 297535.0], [98.8, 297535.0], [98.9, 297535.0], [99.0, 304480.0], [99.1, 304480.0], [99.2, 304480.0], [99.3, 304480.0], [99.4, 304480.0], [99.5, 304480.0], [99.6, 304480.0], [99.7, 304480.0], [99.8, 304480.0], [99.9, 304480.0]], "isOverall": false, "label": "getAllModules", "isController": false}, {"data": [[0.0, 395.0], [0.1, 395.0], [0.2, 395.0], [0.3, 395.0], [0.4, 395.0], [0.5, 395.0], [0.6, 395.0], [0.7, 395.0], [0.8, 395.0], [0.9, 395.0], [1.0, 499.0], [1.1, 499.0], [1.2, 499.0], [1.3, 499.0], [1.4, 499.0], [1.5, 499.0], [1.6, 499.0], [1.7, 499.0], [1.8, 499.0], [1.9, 499.0], [2.0, 633.0], [2.1, 633.0], [2.2, 633.0], [2.3, 633.0], [2.4, 633.0], [2.5, 633.0], [2.6, 633.0], [2.7, 633.0], [2.8, 633.0], [2.9, 633.0], [3.0, 736.0], [3.1, 736.0], [3.2, 736.0], [3.3, 736.0], [3.4, 736.0], [3.5, 736.0], [3.6, 736.0], [3.7, 736.0], [3.8, 736.0], [3.9, 736.0], [4.0, 753.0], [4.1, 753.0], [4.2, 753.0], [4.3, 753.0], [4.4, 753.0], [4.5, 753.0], [4.6, 753.0], [4.7, 753.0], [4.8, 753.0], [4.9, 753.0], [5.0, 787.0], [5.1, 787.0], [5.2, 787.0], [5.3, 787.0], [5.4, 787.0], [5.5, 787.0], [5.6, 787.0], [5.7, 787.0], [5.8, 787.0], [5.9, 787.0], [6.0, 800.0], [6.1, 800.0], [6.2, 800.0], [6.3, 800.0], [6.4, 800.0], [6.5, 800.0], [6.6, 800.0], [6.7, 800.0], [6.8, 800.0], [6.9, 800.0], [7.0, 864.0], [7.1, 864.0], [7.2, 864.0], [7.3, 864.0], [7.4, 864.0], [7.5, 864.0], [7.6, 864.0], [7.7, 864.0], [7.8, 864.0], [7.9, 864.0], [8.0, 910.0], [8.1, 910.0], [8.2, 910.0], [8.3, 910.0], [8.4, 910.0], [8.5, 910.0], [8.6, 910.0], [8.7, 910.0], [8.8, 910.0], [8.9, 910.0], [9.0, 977.0], [9.1, 977.0], [9.2, 977.0], [9.3, 977.0], [9.4, 977.0], [9.5, 977.0], [9.6, 977.0], [9.7, 977.0], [9.8, 977.0], [9.9, 977.0], [10.0, 979.0], [10.1, 979.0], [10.2, 979.0], [10.3, 979.0], [10.4, 979.0], [10.5, 979.0], [10.6, 979.0], [10.7, 979.0], [10.8, 979.0], [10.9, 979.0], [11.0, 1019.0], [11.1, 1019.0], [11.2, 1019.0], [11.3, 1019.0], [11.4, 1019.0], [11.5, 1019.0], [11.6, 1019.0], [11.7, 1019.0], [11.8, 1019.0], [11.9, 1019.0], [12.0, 1130.0], [12.1, 1130.0], [12.2, 1130.0], [12.3, 1130.0], [12.4, 1130.0], [12.5, 1130.0], [12.6, 1130.0], [12.7, 1130.0], [12.8, 1130.0], [12.9, 1130.0], [13.0, 1143.0], [13.1, 1143.0], [13.2, 1143.0], [13.3, 1143.0], [13.4, 1143.0], [13.5, 1143.0], [13.6, 1143.0], [13.7, 1143.0], [13.8, 1143.0], [13.9, 1143.0], [14.0, 1156.0], [14.1, 1156.0], [14.2, 1156.0], [14.3, 1156.0], [14.4, 1156.0], [14.5, 1156.0], [14.6, 1156.0], [14.7, 1156.0], [14.8, 1156.0], [14.9, 1156.0], [15.0, 1251.0], [15.1, 1251.0], [15.2, 1251.0], [15.3, 1251.0], [15.4, 1251.0], [15.5, 1251.0], [15.6, 1251.0], [15.7, 1251.0], [15.8, 1251.0], [15.9, 1251.0], [16.0, 1279.0], [16.1, 1279.0], [16.2, 1279.0], [16.3, 1279.0], [16.4, 1279.0], [16.5, 1279.0], [16.6, 1279.0], [16.7, 1279.0], [16.8, 1279.0], [16.9, 1279.0], [17.0, 1298.0], [17.1, 1298.0], [17.2, 1298.0], [17.3, 1298.0], [17.4, 1298.0], [17.5, 1298.0], [17.6, 1298.0], [17.7, 1298.0], [17.8, 1298.0], [17.9, 1298.0], [18.0, 1328.0], [18.1, 1328.0], [18.2, 1328.0], [18.3, 1328.0], [18.4, 1328.0], [18.5, 1328.0], [18.6, 1328.0], [18.7, 1328.0], [18.8, 1328.0], [18.9, 1328.0], [19.0, 1463.0], [19.1, 1463.0], [19.2, 1463.0], [19.3, 1463.0], [19.4, 1463.0], [19.5, 1463.0], [19.6, 1463.0], [19.7, 1463.0], [19.8, 1463.0], [19.9, 1463.0], [20.0, 1533.0], [20.1, 1533.0], [20.2, 1533.0], [20.3, 1533.0], [20.4, 1533.0], [20.5, 1533.0], [20.6, 1533.0], [20.7, 1533.0], [20.8, 1533.0], [20.9, 1533.0], [21.0, 1563.0], [21.1, 1563.0], [21.2, 1563.0], [21.3, 1563.0], [21.4, 1563.0], [21.5, 1563.0], [21.6, 1563.0], [21.7, 1563.0], [21.8, 1563.0], [21.9, 1563.0], [22.0, 1567.0], [22.1, 1567.0], [22.2, 1567.0], [22.3, 1567.0], [22.4, 1567.0], [22.5, 1567.0], [22.6, 1567.0], [22.7, 1567.0], [22.8, 1567.0], [22.9, 1567.0], [23.0, 1751.0], [23.1, 1751.0], [23.2, 1751.0], [23.3, 1751.0], [23.4, 1751.0], [23.5, 1751.0], [23.6, 1751.0], [23.7, 1751.0], [23.8, 1751.0], [23.9, 1751.0], [24.0, 1831.0], [24.1, 1831.0], [24.2, 1831.0], [24.3, 1831.0], [24.4, 1831.0], [24.5, 1831.0], [24.6, 1831.0], [24.7, 1831.0], [24.8, 1831.0], [24.9, 1831.0], [25.0, 1896.0], [25.1, 1896.0], [25.2, 1896.0], [25.3, 1896.0], [25.4, 1896.0], [25.5, 1896.0], [25.6, 1896.0], [25.7, 1896.0], [25.8, 1896.0], [25.9, 1896.0], [26.0, 1921.0], [26.1, 1921.0], [26.2, 1921.0], [26.3, 1921.0], [26.4, 1921.0], [26.5, 1921.0], [26.6, 1921.0], [26.7, 1921.0], [26.8, 1921.0], [26.9, 1921.0], [27.0, 1961.0], [27.1, 1961.0], [27.2, 1961.0], [27.3, 1961.0], [27.4, 1961.0], [27.5, 1961.0], [27.6, 1961.0], [27.7, 1961.0], [27.8, 1961.0], [27.9, 1961.0], [28.0, 2016.0], [28.1, 2016.0], [28.2, 2016.0], [28.3, 2016.0], [28.4, 2016.0], [28.5, 2016.0], [28.6, 2016.0], [28.7, 2016.0], [28.8, 2016.0], [28.9, 2016.0], [29.0, 2091.0], [29.1, 2091.0], [29.2, 2091.0], [29.3, 2091.0], [29.4, 2091.0], [29.5, 2091.0], [29.6, 2091.0], [29.7, 2091.0], [29.8, 2091.0], [29.9, 2091.0], [30.0, 2094.0], [30.1, 2094.0], [30.2, 2094.0], [30.3, 2094.0], [30.4, 2094.0], [30.5, 2094.0], [30.6, 2094.0], [30.7, 2094.0], [30.8, 2094.0], [30.9, 2094.0], [31.0, 2124.0], [31.1, 2124.0], [31.2, 2124.0], [31.3, 2124.0], [31.4, 2124.0], [31.5, 2124.0], [31.6, 2124.0], [31.7, 2124.0], [31.8, 2124.0], [31.9, 2124.0], [32.0, 2166.0], [32.1, 2166.0], [32.2, 2166.0], [32.3, 2166.0], [32.4, 2166.0], [32.5, 2166.0], [32.6, 2166.0], [32.7, 2166.0], [32.8, 2166.0], [32.9, 2166.0], [33.0, 2347.0], [33.1, 2347.0], [33.2, 2347.0], [33.3, 2347.0], [33.4, 2347.0], [33.5, 2347.0], [33.6, 2347.0], [33.7, 2347.0], [33.8, 2347.0], [33.9, 2347.0], [34.0, 2349.0], [34.1, 2349.0], [34.2, 2349.0], [34.3, 2349.0], [34.4, 2349.0], [34.5, 2349.0], [34.6, 2349.0], [34.7, 2349.0], [34.8, 2349.0], [34.9, 2349.0], [35.0, 2403.0], [35.1, 2403.0], [35.2, 2403.0], [35.3, 2403.0], [35.4, 2403.0], [35.5, 2403.0], [35.6, 2403.0], [35.7, 2403.0], [35.8, 2403.0], [35.9, 2403.0], [36.0, 2432.0], [36.1, 2432.0], [36.2, 2432.0], [36.3, 2432.0], [36.4, 2432.0], [36.5, 2432.0], [36.6, 2432.0], [36.7, 2432.0], [36.8, 2432.0], [36.9, 2432.0], [37.0, 2584.0], [37.1, 2584.0], [37.2, 2584.0], [37.3, 2584.0], [37.4, 2584.0], [37.5, 2584.0], [37.6, 2584.0], [37.7, 2584.0], [37.8, 2584.0], [37.9, 2584.0], [38.0, 2596.0], [38.1, 2596.0], [38.2, 2596.0], [38.3, 2596.0], [38.4, 2596.0], [38.5, 2596.0], [38.6, 2596.0], [38.7, 2596.0], [38.8, 2596.0], [38.9, 2596.0], [39.0, 2650.0], [39.1, 2650.0], [39.2, 2650.0], [39.3, 2650.0], [39.4, 2650.0], [39.5, 2650.0], [39.6, 2650.0], [39.7, 2650.0], [39.8, 2650.0], [39.9, 2650.0], [40.0, 2683.0], [40.1, 2683.0], [40.2, 2683.0], [40.3, 2683.0], [40.4, 2683.0], [40.5, 2683.0], [40.6, 2683.0], [40.7, 2683.0], [40.8, 2683.0], [40.9, 2683.0], [41.0, 2725.0], [41.1, 2725.0], [41.2, 2725.0], [41.3, 2725.0], [41.4, 2725.0], [41.5, 2725.0], [41.6, 2725.0], [41.7, 2725.0], [41.8, 2725.0], [41.9, 2725.0], [42.0, 2758.0], [42.1, 2758.0], [42.2, 2758.0], [42.3, 2758.0], [42.4, 2758.0], [42.5, 2758.0], [42.6, 2758.0], [42.7, 2758.0], [42.8, 2758.0], [42.9, 2758.0], [43.0, 2775.0], [43.1, 2775.0], [43.2, 2775.0], [43.3, 2775.0], [43.4, 2775.0], [43.5, 2775.0], [43.6, 2775.0], [43.7, 2775.0], [43.8, 2775.0], [43.9, 2775.0], [44.0, 2893.0], [44.1, 2893.0], [44.2, 2893.0], [44.3, 2893.0], [44.4, 2893.0], [44.5, 2893.0], [44.6, 2893.0], [44.7, 2893.0], [44.8, 2893.0], [44.9, 2893.0], [45.0, 3269.0], [45.1, 3269.0], [45.2, 3269.0], [45.3, 3269.0], [45.4, 3269.0], [45.5, 3269.0], [45.6, 3269.0], [45.7, 3269.0], [45.8, 3269.0], [45.9, 3269.0], [46.0, 3355.0], [46.1, 3355.0], [46.2, 3355.0], [46.3, 3355.0], [46.4, 3355.0], [46.5, 3355.0], [46.6, 3355.0], [46.7, 3355.0], [46.8, 3355.0], [46.9, 3355.0], [47.0, 3371.0], [47.1, 3371.0], [47.2, 3371.0], [47.3, 3371.0], [47.4, 3371.0], [47.5, 3371.0], [47.6, 3371.0], [47.7, 3371.0], [47.8, 3371.0], [47.9, 3371.0], [48.0, 3381.0], [48.1, 3381.0], [48.2, 3381.0], [48.3, 3381.0], [48.4, 3381.0], [48.5, 3381.0], [48.6, 3381.0], [48.7, 3381.0], [48.8, 3381.0], [48.9, 3381.0], [49.0, 3437.0], [49.1, 3437.0], [49.2, 3437.0], [49.3, 3437.0], [49.4, 3437.0], [49.5, 3437.0], [49.6, 3437.0], [49.7, 3437.0], [49.8, 3437.0], [49.9, 3437.0], [50.0, 3634.0], [50.1, 3634.0], [50.2, 3634.0], [50.3, 3634.0], [50.4, 3634.0], [50.5, 3634.0], [50.6, 3634.0], [50.7, 3634.0], [50.8, 3634.0], [50.9, 3634.0], [51.0, 3693.0], [51.1, 3693.0], [51.2, 3693.0], [51.3, 3693.0], [51.4, 3693.0], [51.5, 3693.0], [51.6, 3693.0], [51.7, 3693.0], [51.8, 3693.0], [51.9, 3693.0], [52.0, 3811.0], [52.1, 3811.0], [52.2, 3811.0], [52.3, 3811.0], [52.4, 3811.0], [52.5, 3811.0], [52.6, 3811.0], [52.7, 3811.0], [52.8, 3811.0], [52.9, 3811.0], [53.0, 3941.0], [53.1, 3941.0], [53.2, 3941.0], [53.3, 3941.0], [53.4, 3941.0], [53.5, 3941.0], [53.6, 3941.0], [53.7, 3941.0], [53.8, 3941.0], [53.9, 3941.0], [54.0, 3945.0], [54.1, 3945.0], [54.2, 3945.0], [54.3, 3945.0], [54.4, 3945.0], [54.5, 3945.0], [54.6, 3945.0], [54.7, 3945.0], [54.8, 3945.0], [54.9, 3945.0], [55.0, 3966.0], [55.1, 3966.0], [55.2, 3966.0], [55.3, 3966.0], [55.4, 3966.0], [55.5, 3966.0], [55.6, 3966.0], [55.7, 3966.0], [55.8, 3966.0], [55.9, 3966.0], [56.0, 3974.0], [56.1, 3974.0], [56.2, 3974.0], [56.3, 3974.0], [56.4, 3974.0], [56.5, 3974.0], [56.6, 3974.0], [56.7, 3974.0], [56.8, 3974.0], [56.9, 3974.0], [57.0, 4104.0], [57.1, 4104.0], [57.2, 4104.0], [57.3, 4104.0], [57.4, 4104.0], [57.5, 4104.0], [57.6, 4104.0], [57.7, 4104.0], [57.8, 4104.0], [57.9, 4104.0], [58.0, 4207.0], [58.1, 4207.0], [58.2, 4207.0], [58.3, 4207.0], [58.4, 4207.0], [58.5, 4207.0], [58.6, 4207.0], [58.7, 4207.0], [58.8, 4207.0], [58.9, 4207.0], [59.0, 4277.0], [59.1, 4277.0], [59.2, 4277.0], [59.3, 4277.0], [59.4, 4277.0], [59.5, 4277.0], [59.6, 4277.0], [59.7, 4277.0], [59.8, 4277.0], [59.9, 4277.0], [60.0, 4484.0], [60.1, 4484.0], [60.2, 4484.0], [60.3, 4484.0], [60.4, 4484.0], [60.5, 4484.0], [60.6, 4484.0], [60.7, 4484.0], [60.8, 4484.0], [60.9, 4484.0], [61.0, 4567.0], [61.1, 4567.0], [61.2, 4567.0], [61.3, 4567.0], [61.4, 4567.0], [61.5, 4567.0], [61.6, 4567.0], [61.7, 4567.0], [61.8, 4567.0], [61.9, 4567.0], [62.0, 4734.0], [62.1, 4734.0], [62.2, 4734.0], [62.3, 4734.0], [62.4, 4734.0], [62.5, 4734.0], [62.6, 4734.0], [62.7, 4734.0], [62.8, 4734.0], [62.9, 4734.0], [63.0, 4779.0], [63.1, 4779.0], [63.2, 4779.0], [63.3, 4779.0], [63.4, 4779.0], [63.5, 4779.0], [63.6, 4779.0], [63.7, 4779.0], [63.8, 4779.0], [63.9, 4779.0], [64.0, 4849.0], [64.1, 4849.0], [64.2, 4849.0], [64.3, 4849.0], [64.4, 4849.0], [64.5, 4849.0], [64.6, 4849.0], [64.7, 4849.0], [64.8, 4849.0], [64.9, 4849.0], [65.0, 4932.0], [65.1, 4932.0], [65.2, 4932.0], [65.3, 4932.0], [65.4, 4932.0], [65.5, 4932.0], [65.6, 4932.0], [65.7, 4932.0], [65.8, 4932.0], [65.9, 4932.0], [66.0, 5038.0], [66.1, 5038.0], [66.2, 5038.0], [66.3, 5038.0], [66.4, 5038.0], [66.5, 5038.0], [66.6, 5038.0], [66.7, 5038.0], [66.8, 5038.0], [66.9, 5038.0], [67.0, 5247.0], [67.1, 5247.0], [67.2, 5247.0], [67.3, 5247.0], [67.4, 5247.0], [67.5, 5247.0], [67.6, 5247.0], [67.7, 5247.0], [67.8, 5247.0], [67.9, 5247.0], [68.0, 5382.0], [68.1, 5382.0], [68.2, 5382.0], [68.3, 5382.0], [68.4, 5382.0], [68.5, 5382.0], [68.6, 5382.0], [68.7, 5382.0], [68.8, 5382.0], [68.9, 5382.0], [69.0, 5741.0], [69.1, 5741.0], [69.2, 5741.0], [69.3, 5741.0], [69.4, 5741.0], [69.5, 5741.0], [69.6, 5741.0], [69.7, 5741.0], [69.8, 5741.0], [69.9, 5741.0], [70.0, 5769.0], [70.1, 5769.0], [70.2, 5769.0], [70.3, 5769.0], [70.4, 5769.0], [70.5, 5769.0], [70.6, 5769.0], [70.7, 5769.0], [70.8, 5769.0], [70.9, 5769.0], [71.0, 5867.0], [71.1, 5867.0], [71.2, 5867.0], [71.3, 5867.0], [71.4, 5867.0], [71.5, 5867.0], [71.6, 5867.0], [71.7, 5867.0], [71.8, 5867.0], [71.9, 5867.0], [72.0, 6102.0], [72.1, 6102.0], [72.2, 6102.0], [72.3, 6102.0], [72.4, 6102.0], [72.5, 6102.0], [72.6, 6102.0], [72.7, 6102.0], [72.8, 6102.0], [72.9, 6102.0], [73.0, 6874.0], [73.1, 6874.0], [73.2, 6874.0], [73.3, 6874.0], [73.4, 6874.0], [73.5, 6874.0], [73.6, 6874.0], [73.7, 6874.0], [73.8, 6874.0], [73.9, 6874.0], [74.0, 6884.0], [74.1, 6884.0], [74.2, 6884.0], [74.3, 6884.0], [74.4, 6884.0], [74.5, 6884.0], [74.6, 6884.0], [74.7, 6884.0], [74.8, 6884.0], [74.9, 6884.0], [75.0, 7034.0], [75.1, 7034.0], [75.2, 7034.0], [75.3, 7034.0], [75.4, 7034.0], [75.5, 7034.0], [75.6, 7034.0], [75.7, 7034.0], [75.8, 7034.0], [75.9, 7034.0], [76.0, 7571.0], [76.1, 7571.0], [76.2, 7571.0], [76.3, 7571.0], [76.4, 7571.0], [76.5, 7571.0], [76.6, 7571.0], [76.7, 7571.0], [76.8, 7571.0], [76.9, 7571.0], [77.0, 7712.0], [77.1, 7712.0], [77.2, 7712.0], [77.3, 7712.0], [77.4, 7712.0], [77.5, 7712.0], [77.6, 7712.0], [77.7, 7712.0], [77.8, 7712.0], [77.9, 7712.0], [78.0, 7766.0], [78.1, 7766.0], [78.2, 7766.0], [78.3, 7766.0], [78.4, 7766.0], [78.5, 7766.0], [78.6, 7766.0], [78.7, 7766.0], [78.8, 7766.0], [78.9, 7766.0], [79.0, 7784.0], [79.1, 7784.0], [79.2, 7784.0], [79.3, 7784.0], [79.4, 7784.0], [79.5, 7784.0], [79.6, 7784.0], [79.7, 7784.0], [79.8, 7784.0], [79.9, 7784.0], [80.0, 7922.0], [80.1, 7922.0], [80.2, 7922.0], [80.3, 7922.0], [80.4, 7922.0], [80.5, 7922.0], [80.6, 7922.0], [80.7, 7922.0], [80.8, 7922.0], [80.9, 7922.0], [81.0, 7964.0], [81.1, 7964.0], [81.2, 7964.0], [81.3, 7964.0], [81.4, 7964.0], [81.5, 7964.0], [81.6, 7964.0], [81.7, 7964.0], [81.8, 7964.0], [81.9, 7964.0], [82.0, 8083.0], [82.1, 8083.0], [82.2, 8083.0], [82.3, 8083.0], [82.4, 8083.0], [82.5, 8083.0], [82.6, 8083.0], [82.7, 8083.0], [82.8, 8083.0], [82.9, 8083.0], [83.0, 8464.0], [83.1, 8464.0], [83.2, 8464.0], [83.3, 8464.0], [83.4, 8464.0], [83.5, 8464.0], [83.6, 8464.0], [83.7, 8464.0], [83.8, 8464.0], [83.9, 8464.0], [84.0, 8790.0], [84.1, 8790.0], [84.2, 8790.0], [84.3, 8790.0], [84.4, 8790.0], [84.5, 8790.0], [84.6, 8790.0], [84.7, 8790.0], [84.8, 8790.0], [84.9, 8790.0], [85.0, 8954.0], [85.1, 8954.0], [85.2, 8954.0], [85.3, 8954.0], [85.4, 8954.0], [85.5, 8954.0], [85.6, 8954.0], [85.7, 8954.0], [85.8, 8954.0], [85.9, 8954.0], [86.0, 9355.0], [86.1, 9355.0], [86.2, 9355.0], [86.3, 9355.0], [86.4, 9355.0], [86.5, 9355.0], [86.6, 9355.0], [86.7, 9355.0], [86.8, 9355.0], [86.9, 9355.0], [87.0, 10361.0], [87.1, 10361.0], [87.2, 10361.0], [87.3, 10361.0], [87.4, 10361.0], [87.5, 10361.0], [87.6, 10361.0], [87.7, 10361.0], [87.8, 10361.0], [87.9, 10361.0], [88.0, 10777.0], [88.1, 10777.0], [88.2, 10777.0], [88.3, 10777.0], [88.4, 10777.0], [88.5, 10777.0], [88.6, 10777.0], [88.7, 10777.0], [88.8, 10777.0], [88.9, 10777.0], [89.0, 11719.0], [89.1, 11719.0], [89.2, 11719.0], [89.3, 11719.0], [89.4, 11719.0], [89.5, 11719.0], [89.6, 11719.0], [89.7, 11719.0], [89.8, 11719.0], [89.9, 11719.0], [90.0, 12803.0], [90.1, 12803.0], [90.2, 12803.0], [90.3, 12803.0], [90.4, 12803.0], [90.5, 12803.0], [90.6, 12803.0], [90.7, 12803.0], [90.8, 12803.0], [90.9, 12803.0], [91.0, 14407.0], [91.1, 14407.0], [91.2, 14407.0], [91.3, 14407.0], [91.4, 14407.0], [91.5, 14407.0], [91.6, 14407.0], [91.7, 14407.0], [91.8, 14407.0], [91.9, 14407.0], [92.0, 14419.0], [92.1, 14419.0], [92.2, 14419.0], [92.3, 14419.0], [92.4, 14419.0], [92.5, 14419.0], [92.6, 14419.0], [92.7, 14419.0], [92.8, 14419.0], [92.9, 14419.0], [93.0, 15763.0], [93.1, 15763.0], [93.2, 15763.0], [93.3, 15763.0], [93.4, 15763.0], [93.5, 15763.0], [93.6, 15763.0], [93.7, 15763.0], [93.8, 15763.0], [93.9, 15763.0], [94.0, 16316.0], [94.1, 16316.0], [94.2, 16316.0], [94.3, 16316.0], [94.4, 16316.0], [94.5, 16316.0], [94.6, 16316.0], [94.7, 16316.0], [94.8, 16316.0], [94.9, 16316.0], [95.0, 19262.0], [95.1, 19262.0], [95.2, 19262.0], [95.3, 19262.0], [95.4, 19262.0], [95.5, 19262.0], [95.6, 19262.0], [95.7, 19262.0], [95.8, 19262.0], [95.9, 19262.0], [96.0, 24015.0], [96.1, 24015.0], [96.2, 24015.0], [96.3, 24015.0], [96.4, 24015.0], [96.5, 24015.0], [96.6, 24015.0], [96.7, 24015.0], [96.8, 24015.0], [96.9, 24015.0], [97.0, 37751.0], [97.1, 37751.0], [97.2, 37751.0], [97.3, 37751.0], [97.4, 37751.0], [97.5, 37751.0], [97.6, 37751.0], [97.7, 37751.0], [97.8, 37751.0], [97.9, 37751.0], [98.0, 71021.0], [98.1, 71021.0], [98.2, 71021.0], [98.3, 71021.0], [98.4, 71021.0], [98.5, 71021.0], [98.6, 71021.0], [98.7, 71021.0], [98.8, 71021.0], [98.9, 71021.0], [99.0, 209620.0], [99.1, 209620.0], [99.2, 209620.0], [99.3, 209620.0], [99.4, 209620.0], [99.5, 209620.0], [99.6, 209620.0], [99.7, 209620.0], [99.8, 209620.0], [99.9, 209620.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 6.0, "series": [{"data": [[700.0, 4.0], [800.0, 1.0], [900.0, 6.0], [1000.0, 2.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 3.0], [1700.0, 3.0], [1800.0, 1.0], [2100.0, 3.0], [2200.0, 1.0], [2400.0, 2.0], [3300.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 2.0], [4000.0, 2.0], [4100.0, 2.0], [4300.0, 1.0], [65900.0, 1.0], [4600.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [5000.0, 1.0], [4900.0, 2.0], [5300.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [6200.0, 1.0], [6900.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [8100.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [8600.0, 1.0], [8900.0, 1.0], [9200.0, 1.0], [9600.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [11900.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [12600.0, 2.0], [12800.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [12900.0, 1.0], [13800.0, 1.0], [17400.0, 1.0], [16800.0, 1.0], [21400.0, 1.0], [21500.0, 1.0], [22400.0, 1.0], [23300.0, 1.0], [23100.0, 1.0], [23800.0, 1.0], [24500.0, 1.0], [26600.0, 1.0], [27200.0, 1.0], [200.0, 1.0], [51800.0, 1.0], [400.0, 2.0], [500.0, 1.0]], "isOverall": false, "label": "getNavigations", "isController": false}, {"data": [[134400.0, 1.0], [165600.0, 1.0], [178400.0, 1.0], [188800.0, 1.0], [196000.0, 1.0], [197600.0, 1.0], [198400.0, 1.0], [210400.0, 1.0], [206000.0, 2.0], [207600.0, 1.0], [206800.0, 1.0], [213200.0, 1.0], [218400.0, 1.0], [219600.0, 1.0], [216800.0, 1.0], [215200.0, 1.0], [222400.0, 1.0], [227600.0, 1.0], [223200.0, 1.0], [226400.0, 1.0], [235200.0, 1.0], [229600.0, 1.0], [232000.0, 1.0], [231600.0, 1.0], [239200.0, 2.0], [244400.0, 1.0], [241200.0, 1.0], [249200.0, 1.0], [1100.0, 1.0], [296800.0, 1.0], [188500.0, 1.0], [204500.0, 1.0], [210900.0, 2.0], [208500.0, 1.0], [212500.0, 1.0], [207700.0, 1.0], [213700.0, 1.0], [214100.0, 1.0], [214900.0, 2.0], [220100.0, 1.0], [213300.0, 1.0], [217700.0, 1.0], [218900.0, 1.0], [219300.0, 1.0], [226900.0, 1.0], [221300.0, 1.0], [228100.0, 1.0], [225700.0, 1.0], [234100.0, 1.0], [232500.0, 1.0], [231300.0, 1.0], [240500.0, 1.0], [237700.0, 1.0], [244500.0, 1.0], [243300.0, 1.0], [246500.0, 1.0], [250500.0, 1.0], [258500.0, 1.0], [72700.0, 1.0], [4500.0, 1.0], [113100.0, 1.0], [168600.0, 1.0], [183000.0, 1.0], [203000.0, 1.0], [202600.0, 1.0], [202200.0, 1.0], [209000.0, 1.0], [206200.0, 1.0], [213000.0, 1.0], [222600.0, 2.0], [221800.0, 1.0], [235400.0, 1.0], [241000.0, 1.0], [257800.0, 1.0], [304400.0, 1.0], [132300.0, 1.0], [38300.0, 1.0], [154700.0, 1.0], [297500.0, 1.0], [178300.0, 1.0], [179900.0, 1.0], [186300.0, 1.0], [47600.0, 1.0], [193900.0, 1.0], [205500.0, 1.0], [219900.0, 2.0], [217900.0, 2.0], [215100.0, 1.0], [221100.0, 1.0], [233500.0, 1.0], [249500.0, 1.0], [88000.0, 1.0], [102800.0, 1.0]], "isOverall": false, "label": "getAllModules", "isController": false}, {"data": [[600.0, 1.0], [700.0, 3.0], [800.0, 2.0], [209600.0, 1.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 3.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 2.0], [2000.0, 3.0], [2100.0, 2.0], [2300.0, 2.0], [2400.0, 2.0], [2500.0, 2.0], [2600.0, 2.0], [2700.0, 3.0], [2800.0, 1.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 1.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 4.0], [4200.0, 2.0], [4100.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 1.0], [5000.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5300.0, 1.0], [5800.0, 1.0], [5700.0, 2.0], [6100.0, 1.0], [6800.0, 2.0], [7000.0, 1.0], [7500.0, 1.0], [7700.0, 3.0], [7900.0, 2.0], [8000.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [9300.0, 1.0], [10300.0, 1.0], [10700.0, 1.0], [11700.0, 1.0], [12800.0, 1.0], [14400.0, 2.0], [15700.0, 1.0], [16300.0, 1.0], [19200.0, 1.0], [24000.0, 1.0], [37700.0, 1.0], [71000.0, 1.0], [300.0, 1.0], [400.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 304400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 255.0, "series": [{"data": [[0.0, 5.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 37.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 255.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.67349462E12, "maxY": 98.5, "series": [{"data": [[1.6734948E12, 93.5], [1.67349498E12, 1.0], [1.67349468E12, 96.28181818181818], [1.67349486E12, 51.432098765432094], [1.67349474E12, 98.5], [1.67349492E12, 6.5], [1.67349462E12, 38.034883720930225]], "isOverall": false, "label": "Load Result of Access Management", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67349498E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 225.0, "minX": 1.0, "maxY": 304480.0, "series": [{"data": [[38.0, 2193.0], [40.0, 5343.0], [43.0, 4030.0], [44.0, 1782.0], [49.0, 4666.6], [50.0, 2114.0], [51.0, 3466.0], [54.0, 6990.0], [58.0, 5341.5], [59.0, 10828.0], [62.0, 1293.0], [66.0, 8984.0], [67.0, 7160.0], [68.0, 7520.333333333334], [73.0, 4814.0], [79.0, 9665.0], [81.0, 1722.0], [83.0, 1571.0], [86.0, 5251.0], [90.0, 11674.0], [91.0, 1202.0], [94.0, 12878.0], [95.0, 7929.0], [99.0, 15620.58064516129], [100.0, 5096.04], [8.0, 225.0], [10.0, 883.75], [11.0, 833.0], [17.0, 1389.0], [18.0, 1492.5], [23.0, 2618.0], [29.0, 3716.0]], "isOverall": false, "label": "getNavigations", "isController": false}, {"data": [[77.76000000000002, 8048.930000000001]], "isOverall": false, "label": "getNavigations-Aggregated", "isController": false}, {"data": [[2.0, 296821.0], [3.0, 297535.0], [4.0, 257897.0], [5.0, 233510.0], [6.0, 249272.0], [7.0, 241254.0], [8.0, 258526.0], [9.0, 231681.0], [10.0, 225701.0], [11.0, 221157.0], [12.0, 228135.0], [13.0, 219375.0], [14.0, 226458.0], [15.0, 241015.0], [16.0, 213047.0], [17.0, 232052.0], [18.0, 243387.0], [19.0, 244505.0], [20.0, 235468.0], [21.0, 221854.0], [22.0, 222632.0], [23.0, 215225.0], [24.0, 219938.0], [25.0, 223268.0], [26.0, 250555.0], [27.0, 218979.0], [28.0, 249529.0], [29.0, 221336.0], [30.0, 237726.0], [31.0, 210939.0], [33.0, 246518.0], [32.0, 202221.0], [35.0, 232505.0], [34.0, 231324.0], [37.0, 244421.0], [36.0, 229629.0], [39.0, 227698.0], [38.0, 217998.0], [41.0, 234165.0], [40.0, 207739.0], [43.0, 216801.0], [42.0, 217765.0], [45.0, 205552.0], [44.0, 240514.0], [47.0, 214945.0], [46.0, 219675.0], [49.0, 239293.0], [48.0, 213348.0], [51.0, 239256.0], [50.0, 222474.0], [52.0, 220126.0], [55.0, 214109.0], [54.0, 215066.5], [57.0, 196012.0], [56.0, 206892.0], [59.0, 213722.0], [58.0, 217971.0], [61.0, 235273.0], [60.0, 222613.0], [63.0, 207605.0], [62.0, 4560.0], [67.0, 206085.0], [66.0, 198469.0], [65.0, 206073.0], [64.0, 202656.0], [71.0, 206290.0], [70.0, 212526.0], [69.0, 218409.0], [68.0, 203000.0], [75.0, 168671.0], [74.0, 226994.0], [73.0, 213297.0], [72.0, 178402.0], [79.0, 219914.0], [78.0, 208583.0], [77.0, 209022.0], [76.0, 197655.0], [83.0, 204500.0], [82.0, 186374.0], [81.0, 188552.0], [80.0, 193928.0], [87.0, 179935.0], [86.0, 210930.0], [85.0, 183005.0], [84.0, 210495.0], [91.0, 102867.0], [90.0, 188847.0], [89.0, 178382.0], [88.0, 165625.0], [95.0, 113122.0], [94.0, 132300.0], [93.0, 154737.0], [92.0, 134494.0], [99.0, 38341.0], [98.0, 88006.0], [97.0, 47656.0], [96.0, 72714.0], [100.0, 1189.0], [1.0, 304480.0]], "isOverall": false, "label": "getAllModules", "isController": false}, {"data": [[50.51000000000001, 205181.59000000014]], "isOverall": false, "label": "getAllModules-Aggregated", "isController": false}, {"data": [[32.0, 2349.0], [33.0, 3200.5], [36.0, 2888.0], [37.0, 1328.0], [38.0, 2725.0], [39.0, 5247.0], [43.0, 6013.0], [44.0, 2094.0], [45.0, 753.0], [46.0, 2117.5], [49.0, 2932.0], [50.0, 499.0], [51.0, 3352.0], [56.0, 4779.0], [57.0, 3693.0], [58.0, 2584.0], [59.0, 3355.0], [64.0, 8464.0], [68.0, 72643.66666666667], [69.0, 4032.5], [72.0, 3941.0], [73.0, 8867.5], [75.0, 3634.0], [76.0, 2403.0], [78.0, 1597.0], [82.0, 9355.0], [85.0, 7571.0], [87.0, 6934.0], [89.0, 7034.0], [90.0, 9988.75], [95.0, 11245.0], [97.0, 5278.0], [98.0, 3966.0], [99.0, 21671.888888888887], [100.0, 4763.812499999999], [7.0, 1224.8], [8.0, 514.0], [11.0, 977.0], [12.0, 1019.0], [15.0, 1463.0], [17.0, 1671.0], [18.0, 800.0], [23.0, 2596.6666666666665], [29.0, 1751.0], [30.0, 3154.3333333333335], [31.0, 910.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[64.19, 7783.559999999999]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 45.0, "minX": 1.67349462E12, "maxY": 4136713.933333333, "series": [{"data": [[1.6734948E12, 314086.98333333334], [1.67349498E12, 52347.5], [1.67349468E12, 77520.38333333333], [1.67349486E12, 4136713.933333333], [1.67349474E12, 159477.11666666667], [1.67349492E12, 471153.51666666666], [1.67349462E12, 43444.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6734948E12, 270.0], [1.67349498E12, 45.0], [1.67349468E12, 3188.25], [1.67349486E12, 3608.616666666667], [1.67349474E12, 233.81666666666666], [1.67349492E12, 405.0], [1.67349462E12, 1974.4666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67349498E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 485.0, "minX": 1.67349462E12, "maxY": 304480.0, "series": [{"data": [[1.67349468E12, 9753.111111111113], [1.67349486E12, 485.0], [1.67349474E12, 27168.0], [1.67349462E12, 3989.0]], "isOverall": false, "label": "getNavigations", "isController": false}, {"data": [[1.6734948E12, 118372.33333333333], [1.67349498E12, 304480.0], [1.67349468E12, 1189.0], [1.67349486E12, 212846.82278481018], [1.67349474E12, 58001.0], [1.67349492E12, 251335.4]], "isOverall": false, "label": "getAllModules", "isController": false}, {"data": [[1.67349468E12, 7671.95652173913], [1.67349486E12, 209620.0], [1.67349474E12, 71021.0], [1.67349462E12, 2784.7115384615377]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67349498E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 296.0, "minX": 1.67349462E12, "maxY": 70944.0, "series": [{"data": [[1.67349468E12, 1144.7460317460318], [1.67349486E12, 304.0], [1.67349474E12, 831.0], [1.67349462E12, 629.5882352941175]], "isOverall": false, "label": "getNavigations", "isController": false}, {"data": [[1.6734948E12, 1193.3333333333333], [1.67349498E12, 322.0], [1.67349468E12, 296.0], [1.67349486E12, 1281.7974683544305], [1.67349474E12, 2689.0], [1.67349492E12, 1459.2]], "isOverall": false, "label": "getAllModules", "isController": false}, {"data": [[1.67349468E12, 6249.391304347825], [1.67349486E12, 1379.0], [1.67349474E12, 70944.0], [1.67349462E12, 2620.057692307693]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67349498E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67349462E12, "maxY": 3910.195652173913, "series": [{"data": [[1.67349468E12, 21.95238095238095], [1.67349486E12, 83.0], [1.67349474E12, 296.0], [1.67349462E12, 0.0]], "isOverall": false, "label": "getNavigations", "isController": false}, {"data": [[1.6734948E12, 0.0], [1.67349498E12, 0.0], [1.67349468E12, 0.0], [1.67349486E12, 0.0], [1.67349474E12, 658.6666666666666], [1.67349492E12, 0.0]], "isOverall": false, "label": "getAllModules", "isController": false}, {"data": [[1.67349468E12, 3910.195652173913], [1.67349486E12, 828.0], [1.67349474E12, 839.0], [1.67349462E12, 1498.0192307692307]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67349498E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 225.0, "minX": 1.67349462E12, "maxY": 304480.0, "series": [{"data": [[1.6734948E12, 154737.0], [1.67349498E12, 304480.0], [1.67349468E12, 65998.0], [1.67349486E12, 250555.0], [1.67349474E12, 88006.0], [1.67349492E12, 297535.0], [1.67349462E12, 11339.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6734948E12, 154737.0], [1.67349498E12, 304480.0], [1.67349468E12, 21614.10000000001], [1.67349486E12, 240269.8], [1.67349474E12, 88006.0], [1.67349492E12, 297535.0], [1.67349462E12, 7040.999999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6734948E12, 154737.0], [1.67349498E12, 304480.0], [1.67349468E12, 63455.7699999999], [1.67349486E12, 250555.0], [1.67349474E12, 88006.0], [1.67349492E12, 297535.0], [1.67349462E12, 11339.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6734948E12, 154737.0], [1.67349498E12, 304480.0], [1.67349468E12, 24307.05], [1.67349486E12, 244496.6], [1.67349474E12, 88006.0], [1.67349492E12, 297535.0], [1.67349462E12, 8801.999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6734948E12, 72714.0], [1.67349498E12, 304480.0], [1.67349468E12, 495.0], [1.67349486E12, 485.0], [1.67349474E12, 2468.0], [1.67349492E12, 221157.0], [1.67349462E12, 225.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6734948E12, 122711.0], [1.67349498E12, 304480.0], [1.67349468E12, 6413.5], [1.67349486E12, 215187.0], [1.67349474E12, 49762.0], [1.67349492E12, 249272.0], [1.67349462E12, 2508.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67349498E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1189.0, "minX": 1.0, "maxY": 233510.0, "series": [{"data": [[8.0, 1565.0], [1.0, 133397.0], [2.0, 206591.0], [4.0, 109979.5], [5.0, 4961.0], [6.0, 7964.0], [3.0, 11019.0], [12.0, 1961.0], [7.0, 3363.0], [30.0, 4075.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 233510.0], [6.0, 15763.0], [12.0, 1189.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2172.0, "series": [{"data": [[8.0, 1546.0], [1.0, 845.5], [2.0, 946.0], [4.0, 1901.0], [5.0, 603.0], [6.0, 1119.0], [3.0, 1153.0], [12.0, 345.0], [7.0, 1490.0], [30.0, 1487.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 2172.0], [6.0, 0.0], [12.0, 296.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.67349462E12, "maxY": 2.65, "series": [{"data": [[1.67349468E12, 2.2666666666666666], [1.67349486E12, 0.03333333333333333], [1.67349474E12, 0.05], [1.67349462E12, 2.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67349486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67349462E12, "maxY": 1.8, "series": [{"data": [[1.6734948E12, 0.1], [1.67349498E12, 0.016666666666666666], [1.67349468E12, 1.8], [1.67349486E12, 1.35], [1.67349474E12, 0.1], [1.67349492E12, 0.15], [1.67349462E12, 1.4333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.67349468E12, 0.016666666666666666]], "isOverall": false, "label": "423", "isController": false}, {"data": [[1.67349468E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.67349492E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67349498E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67349462E12, "maxY": 1.3166666666666667, "series": [{"data": [[1.67349468E12, 1.05], [1.67349486E12, 0.016666666666666666], [1.67349474E12, 0.03333333333333333], [1.67349462E12, 0.5666666666666667]], "isOverall": false, "label": "getNavigations-success", "isController": false}, {"data": [[1.6734948E12, 0.1], [1.67349498E12, 0.016666666666666666], [1.67349486E12, 1.3166666666666667], [1.67349474E12, 0.05], [1.67349492E12, 0.15]], "isOverall": false, "label": "getAllModules-success", "isController": false}, {"data": [[1.67349468E12, 0.016666666666666666], [1.67349492E12, 0.016666666666666666]], "isOverall": false, "label": "getAllModules-failure", "isController": false}, {"data": [[1.67349468E12, 0.75], [1.67349486E12, 0.016666666666666666], [1.67349474E12, 0.016666666666666666], [1.67349462E12, 0.8666666666666667]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.67349468E12, 0.016666666666666666]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67349498E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67349462E12, "maxY": 1.8, "series": [{"data": [[1.6734948E12, 0.1], [1.67349498E12, 0.016666666666666666], [1.67349468E12, 1.8], [1.67349486E12, 1.35], [1.67349474E12, 0.1], [1.67349492E12, 0.15], [1.67349462E12, 1.4333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.67349468E12, 0.03333333333333333], [1.67349492E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67349498E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

